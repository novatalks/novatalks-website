/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// big thanks to https://docs.pmnd.rs/react-three-fiber/getting-started/loading-models#loading-gltf-models-as-jsx-components

import * as THREE from 'three';
import React, { useEffect, useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Mesh_Mesh_head_geo001_lambert2SG001: THREE.Mesh;
  };
  materials: {};
};

const useMousePosition = () => {
  const [mousePosition, setMousePosition] = useState({ x: null, y: null });

  const updateMousePosition = ev => {
    setMousePosition({ x: ev.clientX, y: ev.clientY });
  };

  useEffect(() => {
    window.addEventListener('mousemove', updateMousePosition);

    return () => window.removeEventListener('mousemove', updateMousePosition);
  }, []);

  return mousePosition;
};

function getWindowDimensions() {
  const { innerWidth: width, innerHeight: height } = window;
  return {
    width,
    height,
  };
}

function useWindowDimensions() {
  const [windowDimensions, setWindowDimensions] = useState(
    getWindowDimensions()
  );

  useEffect(() => {
    function handleResize() {
      setWindowDimensions(getWindowDimensions());
    }

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowDimensions;
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF('/scene.gltf') as GLTFResult;

  const { x, y } = useMousePosition();
  const { width, height } = useWindowDimensions();
  const hasMovedCursor = typeof x === 'number' && typeof y === 'number';

  const [hovered, setHover] = useState(false);
  const [active, setActive] = useState(false);

  useFrame(() => {
    group.current.rotation.x = (y - 85 - (height - 85) / 2) / 2000;
    group.current.rotation.y = (x - width / 2) / 2000;
  });

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onClick={e => setActive(!active)}
      onPointerOver={e => setHover(true)}
      onPointerOut={e => setHover(false)}
    >
      <group rotation={[1.604, 0, 0]}>
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Mesh_Mesh_head_geo001_lambert2SG001.geometry}
            material={nodes.Mesh_Mesh_head_geo001_lambert2SG001.material}
            rotation={[0, 0, 0.008]}
          />
        </group>
      </group>
      <pointLight
        intensity={1}
        decay={2}
        position={[1.266, -5.667, 24.626]}
        rotation={[1.198, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload('/scene.gltf');
